{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nimport { decorate } from './private/utils';\nvar DEFAULT_MSG = 'This function will be removed in future versions.';\n\nfunction handleDescriptor(target, key, descriptor, _ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      _ref2$ = _ref2[0],\n      msg = _ref2$ === undefined ? DEFAULT_MSG : _ref2$,\n      _ref2$2 = _ref2[1],\n      options = _ref2$2 === undefined ? {} : _ref2$2;\n\n  if (typeof descriptor.value !== 'function') {\n    throw new SyntaxError('Only functions can be marked as deprecated');\n  }\n\n  var methodSignature = target.constructor.name + '#' + key;\n\n  if (options.url) {\n    msg += '\\n\\n    See ' + options.url + ' for more details.\\n\\n';\n  }\n\n  return _extends({}, descriptor, {\n    value: function deprecationWrapper() {\n      console.warn('DEPRECATION ' + methodSignature + ': ' + msg);\n      return descriptor.value.apply(this, arguments);\n    }\n  });\n}\n\nexport default function deprecate() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return decorate(handleDescriptor, args);\n}","map":null,"metadata":{},"sourceType":"module"}