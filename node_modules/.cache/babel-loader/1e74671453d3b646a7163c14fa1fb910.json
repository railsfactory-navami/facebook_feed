{"ast":null,"code":"import { decorate, createDefaultSetter } from './private/utils';\nvar defineProperty = Object.defineProperty;\n\nfunction handleDescriptor(target, key, descriptor) {\n  var configurable = descriptor.configurable,\n      enumerable = descriptor.enumerable,\n      initializer = descriptor.initializer,\n      value = descriptor.value;\n  return {\n    configurable: configurable,\n    enumerable: enumerable,\n    get: function get() {\n      // This happens if someone accesses the\n      // property directly on the prototype\n      if (this === target) {\n        return;\n      }\n\n      var ret = initializer ? initializer.call(this) : value;\n      defineProperty(this, key, {\n        configurable: configurable,\n        enumerable: enumerable,\n        writable: true,\n        value: ret\n      });\n      return ret;\n    },\n    set: createDefaultSetter(key)\n  };\n}\n\nexport default function lazyInitialize() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return decorate(handleDescriptor, args);\n}","map":null,"metadata":{},"sourceType":"module"}